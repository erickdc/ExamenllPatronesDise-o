// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExamenllPatronesDiseño
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EjecutadorComandosFeature
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "EjecutadorComandos.feature"
#line hidden

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EjecutadorComandos", "Para poder realizar operaciones aritmeticas\nComo estudiante quiero ver\nla suma ,r" +
                    "esta y multiplicacion de dos operandos", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "EjecutadorComandos")))
            {
                ExamenllPatronesDiseño.EjecutadorComandosFeature.FeatureSetup(null);
            }
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sumar dos numeros")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EjecutadorComandos")]
        public virtual void SumarDosNumeros()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sumar dos numeros", ((string[])(null)));
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("1 y 3 para la \"Suma\" en la calculadora", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.When("presione sumar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
            testRunner.Then("el resultado de la suma debe ser 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Restar dos numeros")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EjecutadorComandos")]
        public virtual void RestarDosNumeros()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restar dos numeros", ((string[])(null)));
#line 12
            this.ScenarioSetup(scenarioInfo);
#line 13
            testRunner.Given("5 y 6 para la \"Resta\" en la calculadora", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
            testRunner.When("presione restar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
            testRunner.Then("el resultado de la resta debe ser -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Mutiplicar dos numeros")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EjecutadorComandos")]
        public virtual void MutiplicarDosNumeros()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mutiplicar dos numeros", ((string[])(null)));
#line 17
            this.ScenarioSetup(scenarioInfo);
#line 18
            testRunner.Given("3 y 4 para la \"Multiplicacion\" en la calculadora", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
            testRunner.When("presione multiplicar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
            testRunner.Then("el resultado de la multiplicacion debe ser 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ejecutar Lista de operaciones Aritmeticas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EjecutadorComandos")]
        public virtual void EjecutarListaDeOperacionesAritmeticas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ejecutar Lista de operaciones Aritmeticas", ((string[])(null)));
#line 22
            this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operando1",
                        "Operando2",
                        "Operacion"});
            table1.AddRow(new string[] {
                        "1",
                        "3",
                        "Suma"});
            table1.AddRow(new string[] {
                        "5",
                        "6",
                        "Resta"});
            table1.AddRow(new string[] {
                        "3",
                        "4",
                        "Multiplicacion"});
#line 23
            testRunner.Given("la lista de operaciones aritmeticas", ((string)(null)), table1, "Given ");
#line 29
            testRunner.When("Se ejecutan todas las operaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resultado"});
            table2.AddRow(new string[] {
                        "4"});
            table2.AddRow(new string[] {
                        "-1"});
            table2.AddRow(new string[] {
                        "12"});
#line 31
            testRunner.Then("este resultado debe aparecer", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

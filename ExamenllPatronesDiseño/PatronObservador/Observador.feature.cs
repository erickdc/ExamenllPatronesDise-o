// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.2.1
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18449
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PatronDiseño
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.2.1")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EjecutadorComandos")]
    public partial class EjecutadorComandosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Observador.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EjecutadorComandos", "Para poder realizar operaciones utilizando patron Observador", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Agregar Observador")]
        public virtual void AgregarObservador()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Agregar Observador", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("se debe agregar Observador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("presione la opcion Registrar Observador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Observador"});
            table1.AddRow(new string[] {
                        "Suma"});
            table1.AddRow(new string[] {
                        "Resta"});
            table1.AddRow(new string[] {
                        "Multiplicacion"});
#line 8
 testRunner.Then("El resultado debe ser:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remover Observador")]
        public virtual void RemoverObservador()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remover Observador", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("se debe eliminar un observador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("presione la opcion Remover", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Observador"});
            table2.AddRow(new string[] {
                        "Suma"});
            table2.AddRow(new string[] {
                        "Resta"});
#line 17
 testRunner.Then("el resultado de la accion debe ser", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("El sujeto ejecuta la accion")]
        public virtual void ElSujetoEjecutaLaAccion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("El sujeto ejecuta la accion", ((string[])(null)));
#line 23
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table3.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3"});
#line 24
 testRunner.Given("el sujeto ejecuta la ccion de notificar las actualizaciones en las clases de cada" +
                    " observador", ((string)(null)), table3, "Given ");
#line 28
 testRunner.When("el operador recolecta la informacion de las clases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table4.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3"});
#line 30
 testRunner.Then("este resultado debe ser el siguiente", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("El sujeto notifica los cambios que ocurridos en las clases de los observadores")]
        public virtual void ElSujetoNotificaLosCambiosQueOcurridosEnLasClasesDeLosObservadores()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("El sujeto notifica los cambios que ocurridos en las clases de los observadores", ((string[])(null)));
#line 35
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2",
                        "Resultado"});
            table5.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3",
                        "4"});
            table5.AddRow(new string[] {
                        "Resta",
                        "5",
                        "6",
                        "1"});
            table5.AddRow(new string[] {
                        "Multiplicacion",
                        "4",
                        "3",
                        "12"});
#line 36
 testRunner.Given("las clases tienen los siguiente resultados", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Promedio"});
            table6.AddRow(new string[] {
                        "5.66"});
#line 41
 testRunner.And("Total  Promedio", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2",
                        "Resultado"});
            table7.AddRow(new string[] {
                        "Suma",
                        "2",
                        "3",
                        "5"});
#line 44
 testRunner.When("Los observadores notifican los cambios que re hisieron en las clases", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Promedio"});
            table8.AddRow(new string[] {
                        "6"});
#line 47
 testRunner.Then("el sujeto notifica los cambios de los observadores y la informacion del promedio " +
                    "se actualiza automaticamente", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

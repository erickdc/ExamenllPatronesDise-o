// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExamenllPatronesDiseño
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IteradorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Iterador.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Iterador", "Para poder recorrer operaciones aritmeticas\r\nComo estudiante quiero llenar las li" +
                    "stas de \r\nlas sumas ,restas y multiplicaciones de dos operandos", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Iterador")))
            {
                ExamenllPatronesDiseño.IteradorFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Llenar las listas de las operaciones")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Iterador")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void LlenarLasListasDeLasOperaciones()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Llenar las listas de las operaciones", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table1.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3"});
            table1.AddRow(new string[] {
                        "Resta",
                        "5",
                        "6"});
            table1.AddRow(new string[] {
                        "Resta",
                        "8",
                        "6"});
            table1.AddRow(new string[] {
                        "Suma",
                        "3",
                        "3"});
            table1.AddRow(new string[] {
                        "Resta",
                        "6",
                        "3"});
            table1.AddRow(new string[] {
                        "Multiplicacion",
                        "3",
                        "4"});
#line 8
 testRunner.Given("Una lista de operaciones:", ((string)(null)), table1, "Given ");
#line 17
 testRunner.When("Se llenan todas las listas de las operaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("La cantidad de operaciones en la Suma deberian ser 2 , en la Resta 3 y en la Mult" +
                    "iplicacion 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Teniendo una lista llena de operaciones obtener la operacion actual de la suma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Iterador")]
        public virtual void TeniendoUnaListaLlenaDeOperacionesObtenerLaOperacionActualDeLaSuma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teniendo una lista llena de operaciones obtener la operacion actual de la suma", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table2.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3"});
            table2.AddRow(new string[] {
                        "Resta",
                        "5",
                        "6"});
            table2.AddRow(new string[] {
                        "Resta",
                        "8",
                        "6"});
            table2.AddRow(new string[] {
                        "Suma",
                        "3",
                        "3"});
            table2.AddRow(new string[] {
                        "Resta",
                        "6",
                        "3"});
            table2.AddRow(new string[] {
                        "Multiplicacion",
                        "3",
                        "4"});
#line 21
 testRunner.Given("Una lista de operaciones:", ((string)(null)), table2, "Given ");
#line 29
 testRunner.When("Se llenan todas las listas de las operaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("se crea el iterador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("Se obtiene la primera operacion de la suma", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.Then("La operacion deberia ser \"Suma\" con 1 y 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Teniendo una lista llena de operaciones obtener la segunda operacion Resta")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Iterador")]
        public virtual void TeniendoUnaListaLlenaDeOperacionesObtenerLaSegundaOperacionResta()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teniendo una lista llena de operaciones obtener la segunda operacion Resta", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table3.AddRow(new string[] {
                        "Suma",
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "Resta",
                        "5",
                        "6"});
            table3.AddRow(new string[] {
                        "Resta",
                        "8",
                        "6"});
            table3.AddRow(new string[] {
                        "Suma",
                        "3",
                        "3"});
            table3.AddRow(new string[] {
                        "Resta",
                        "6",
                        "3"});
            table3.AddRow(new string[] {
                        "Multiplicacion",
                        "3",
                        "4"});
#line 36
 testRunner.Given("Una lista de operaciones:", ((string)(null)), table3, "Given ");
#line 44
 testRunner.When("Se llenan todas las listas de las operaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("se crea el iterador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("Se llama la siguiente operacion de la resta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("La operacion deberia ser \"Resta\" con 5 y 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Nos encontramos al final de las operaciones de la resta y agarramos la siguiente " +
            "operacion y deberia de terminar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Iterador")]
        public virtual void NosEncontramosAlFinalDeLasOperacionesDeLaRestaYAgarramosLaSiguienteOperacionYDeberiaDeTerminar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nos encontramos al final de las operaciones de la resta y agarramos la siguiente " +
                    "operacion y deberia de terminar", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operacion",
                        "Operando1",
                        "Operando2"});
            table4.AddRow(new string[] {
                        "Resta",
                        "6",
                        "3"});
#line 51
 testRunner.Given("Una lista de operaciones:", ((string)(null)), table4, "Given ");
#line 55
 testRunner.When("Se llenan todas las listas de las operaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.And("se crea el iterador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("Se llama la siguiente operacion de la resta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("Deberia de haber terminado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
